1. Overview
MostLogin is a Chromium-based fingerprint browser with multi-window management.
Through the Local API, developers can programmatically control windows and integrate with automation frameworks. When a window is opened, MostLogin returns:
CDP debugging URL (for CDP-based automation)
HTTP URL (for CDP over HTTP)
Process PID
Chromedriver path (driverPath) (for WebDriver/Selenium)
Compatible frameworks:
Selenium (via Chromedriver)
Playwright (via connect_over_cdp)
Puppeteer (via browserWSEndpoint)
2. Environment Setup
Install and start the MostLogin client.
Enable the Local API service.
Confirm the Local API listening address (default: http://127.0.0.1:30898).
Ensure firewall rules allow local connections to the exposed ports.
3. Local API Capabilities (What You Can Do)
For detailed endpoints, parameters, and examples, see the Detailed API Reference at the end of this document.
Folder management
Create, update, delete, and list Folders.
Profile management
Create, update, delete, and list Profiles.
Assign a Proxy to a Profile.
Assign a Folder to a profile
Proxy management
Create, update, delete, and list Proxies.
Optionally test proxy connectivity.
Window lifecycle
Open a Profile window.
Close a Profile window.
Retrieve window runtime information (ws, http, pid, driverPath, status).
Automation integration helpers
Obtain connection details for CDP or Chromedriver.
Use ws with Playwright/Puppeteer.
Use driverPath with Selenium.
4. Typical Workflow
1.
Use the Local API to open a window for a specific Profile.
2.
Read the response to obtain ws, http, pid, and driverPath.
3.
Connect your automation framework (Selenium/Playwright/Puppeteer) using those values.
4.
Run your automation logic.
5.
Use the Local API to close the window (or close it gracefully in your framework first, then confirm with the API).
5. Integration Examples
5.1 Selenium (WebDriver via Chromedriver)
from selenium import webdriver

options = webdriver.ChromeOptions()
# When using CDP-attached Chrome, you may also set debugger_address if required:
# options.debugger_address = "127.0.0.1:9222"

driver = webdriver.Chrome(
    executable_path="/path/to/chromedriver",  # use the 'driverPath' returned by MostLogin
    options=options
)

driver.get("https://example.com")
# ... your automation ...
driver.quit()
5.2 Playwright (CDP over HTTP)
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.connect_over_cdp("http://127.0.0.1:9222")  # use the 'httpUrl' or a full CDP URL
    context = browser.contexts[0] if browser.contexts else browser.new_context()
    page = context.new_page()
    page.goto("https://example.com")
    # ... your automation ...
    browser.close()
5.3 Puppeteer (CDP over WebSocket)
const puppeteer = require('puppeteer-core');

(async () => {
  const browser = await puppeteer.connect({
    browserWSEndpoint: "ws://127.0.0.1:9222/devtools/browser/xxxx"  // use the 'cdpUrl' returned by MostLogin
  });

  const page = await browser.newPage();
  await page.goto('https://example.com');
  // ... your automation ...
  await browser.close();
})();
Note:
Prefer CDP (ws / http) for Playwright and Puppeteer.
Prefer WebDriver (driverPath) for Selenium.
If both are available, choose based on your framework and tooling.
6. Best Practices
Close gracefully: end automation tasks before closing the window via API.
Track PIDs: monitor pid to avoid orphaned processes.
Unique IDs: use profileId (if provided by the API) to target a specific window.
Version alignment: ensure driverPath matches the Chromium build used by MostLogin when using Selenium.
Network hygiene: verify proxy availability before assigning it to a Profile.
7. Troubleshooting (FAQ)
1.
Cannot connect over CDP after opening a profile window
Verify the port is open locally and not blocked by firewall/security software.
Ensure the window is still running and not closed by the user or system.
2.
Version mismatch errors in Selenium/Puppeteer
Confirm that driverPath (Chromedriver) matches the Chromium version embedded in MostLogin.
Update your client libraries if they are too old for the current CDP protocol.
3.
Proxy appears unused
Confirm the Proxy is correctly associated with the Profile (and that the API call succeeded).
Test the Proxy independently to rule out connectivity or authentication issues.
8. Detailed API Reference
Replace this section with your full endpoint documentation (paths, methods, parameters, examples).
